### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   ThermalCollectorMatrix(; name, Ns, Np)

## Parameters:

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `Ns`         | Number of rows                         | --  |    |
| `Np`         | Number of columns                         | --  |    |

## Connectors

 * `port_a` - ([`HeatPort`](@ref))
 * `port_b` - ([`HeatPort`](@ref))
"""
@component function ThermalCollectorMatrix(; name, Ns=nothing, Np=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Ns::Int64 = Ns), [description = "Number of rows"])
  append!(__params, @parameters (Np::Int64 = Np), [description = "Number of columns"])

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port_a = HeatTransfer.HeatPort())
  push!(__systems, @named port_b = HeatTransfer.HeatPort())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, port_b.Q_flow + sum(port_a.Q_flow) ~ 0)
  push!(__eqs, port_a.T ~ fill(port_b.T, Ns, Np))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export ThermalCollectorMatrix

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(ThermalCollectorMatrix)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>

      </svg></div></div>""")
