### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   FixedHeatFlow(; name, Q_flow, T_ref, alpha)

Fixed heat flow boundary condition
This component is translated by DyadAI

## Parameters:

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `Q_flow`         | Fixed heat flow rate at port                         | W  |    |
| `T_ref`         | Reference temperature                         | K  |   293.15 |
| `alpha`         | Temperature coefficient of heat flow rate                         | 1/K  |   0 |

## Connectors

 * `port` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))
"""
@component function FixedHeatFlow(; name, Q_flow=nothing, T_ref=293.15, alpha=0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Q_flow::Float64 = Q_flow), [description = "Fixed heat flow rate at port"])
  append!(__params, @parameters (T_ref::Float64 = T_ref), [description = "Reference temperature"])
  append!(__params, @parameters (alpha::Float64 = alpha), [description = "Temperature coefficient of heat flow rate"])

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port = HeatTransfer.HeatPort())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, port.Q_flow ~ -Q_flow * (1 + alpha * (port.T - T_ref)))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export FixedHeatFlow

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(FixedHeatFlow)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>

      </svg></div></div>""")
