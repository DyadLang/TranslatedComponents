### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   ThermalConductor(; name, G)

Lumped thermal element transporting heat without storing it
This component is translated by DyadAI

## Parameters:

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `G`         | Constant thermal conductance of material                         | W/K  |    |

## Connectors

 * `port_a` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))
 * `port_b` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))

## Variables

| Name         | Description                         | Units  |
| ------------ | ----------------------------------- | ------ |
| `Q_flow`         | Heat flow rate from port_a -> port_b                         | W  |
| `dT`         | port_a.T - port_b.T                         | K  |
"""
@component function ThermalConductor(; name, G=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (G::Float64 = G), [description = "Constant thermal conductance of material"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (Q_flow(t)), [description = "Heat flow rate from port_a -> port_b"])
  append!(__vars, @variables (dT(t)), [description = "port_a.T - port_b.T"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port_a = HeatTransfer.HeatPort())
  push!(__systems, @named port_b = HeatTransfer.HeatPort())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, dT ~ port_a.T - port_b.T)
  push!(__eqs, port_a.Q_flow ~ Q_flow)
  push!(__eqs, port_b.Q_flow ~ -Q_flow)
  push!(__eqs, Q_flow ~ G * dT)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export ThermalConductor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(ThermalConductor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>

      </svg></div></div>""")
