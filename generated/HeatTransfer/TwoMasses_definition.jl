### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   TwoMasses(; name, T_final_K)

Simple conduction demo
This component is translated by DyadAI

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `T_final_K`         | Projected final temperature                         | K  |    |
"""
@component function TwoMasses(; name, T_final_K=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T_final_K::Real = T_final_K), [description = "Projected final temperature"])

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named mass1 = TranslatedComponents.HeatTransfer.HeatCapacitor(C=15))
  push!(__systems, @named mass2 = TranslatedComponents.HeatTransfer.HeatCapacitor(C=15))
  push!(__systems, @named conduction = TranslatedComponents.HeatTransfer.ThermalConductor(G=10))
  push!(__systems, @named Tsensor1 = TranslatedComponents.HeatTransfer.TemperatureSensor())
  push!(__systems, @named Tsensor2 = TranslatedComponents.HeatTransfer.TemperatureSensor())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()
  __defaults[mass1.T] = (373.15)
  __defaults[mass2.T] = (273.15)

  ### Initialization Equations
  __initialization_eqs = []
  push!(__initialization_eqs, T_final_K ~ (mass1.T * mass1.C + mass2.T * mass2.C) / (mass1.C + mass2.C))

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(mass1.port, conduction.port_a))
  push!(__eqs, connect(conduction.port_b, mass2.port))
  push!(__eqs, connect(mass1.port, Tsensor1.port))
  push!(__eqs, connect(mass2.port, Tsensor2.port))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export TwoMasses

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(TwoMasses)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
