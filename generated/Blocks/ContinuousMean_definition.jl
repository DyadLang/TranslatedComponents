### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   ContinuousMean(; name, t_eps, startTime, t_0, actualStartTime)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `t_eps`         | Mean value calculation starts at startTime + t_eps                         | s  |   1e-7 |
| `startTime`         | Starting point for mean if after simulation start-point                         | --  |   -Modelica.Constants.inf |
| `t_0`         | Start time                         | --  |    |
| `actualStartTime`         |                          | --  |   max(t_0, startTime) |

## Connectors

 * `u` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `y` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `mu`         | Internal integrator variable                         | --  | 
"""
@component function ContinuousMean(; name, t_eps=1e-7, startTime=-Modelica.Constants.inf, t_0=nothing, actualStartTime=max(t_0, startTime))

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (t_eps::Real = t_eps), [description = "Mean value calculation starts at startTime + t_eps"])
  append!(__params, @parameters (startTime::Real = startTime), [description = "Starting point for mean if after simulation start-point"])
  append!(__params, @parameters (t_0::Real = t_0), [description = "Start time"])
  append!(__params, @parameters (actualStartTime::Real = actualStartTime))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (u(t)::Real), [input = true])
  append!(__vars, @variables (y(t)::Real), [output = true])
  append!(__vars, @variables (mu(t)::Real), [description = "Internal integrator variable"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()
  __defaults[t_0] = (t)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(mu) ~ ifelse(t >= actualStartTime, u, 0))
  push!(__eqs, y ~ no_if_lifting(ifelse(t > actualStartTime + t_eps, mu / (t - actualStartTime), u)))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export ContinuousMean

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(ContinuousMean)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
