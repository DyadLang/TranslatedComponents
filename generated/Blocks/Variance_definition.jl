### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Variance(; name, t_eps, t_0)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `t_eps`         | Variance calculation starts at startTime + t_eps                         | s  |   1e-7 |
| `t_0`         | Start time                         | --  |    |

## Connectors

 * `u` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `y` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `mu`         | Mean value (state variable)                         | --  | 
| `var`         | Variance (state variable)                         | --  | 
"""
@component function Variance(; name, t_eps=1e-7, t_0=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (t_eps::Real = t_eps), [description = "Variance calculation starts at startTime + t_eps"])
  append!(__params, @parameters (t_0::Real = t_0), [description = "Start time"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (u(t)::Real), [input = true])
  append!(__vars, @variables (y(t)::Real), [output = true])
  append!(__vars, @variables (mu(t)::Real), [description = "Mean value (state variable)"])
  append!(__vars, @variables (var(t)::Real), [description = "Variance (state variable)"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()
  __defaults[t_0] = (t)
  __defaults[mu] = (u)
  __defaults[var] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(mu) ~ no_if_lifting(ifelse(t >= t_0 + t_eps, (u - mu) / (t - t_0), 0)))
  push!(__eqs, D(var) ~ no_if_lifting(ifelse(t >= t_0 + t_eps, ((u - mu) ^ 2 - var) / (t - t_0), 0)))
  push!(__eqs, y ~ no_if_lifting(ifelse(t >= t_0 + t_eps, max(var, 0), 0)))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export Variance

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Variance)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
