### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Add3(; name, k1, k2, k3)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `k1`         | Gain of input signal 1                         | --  |   1 |
| `k2`         | Gain of input signal 2                         | --  |   1 |
| `k3`         | Gain of input signal 3                         | --  |   1 |

## Connectors

 * `u1` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `u2` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `u3` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `y` - This connector represents a real signal as an output from a component ([`RealOutput`](@ref))
"""
@component function Add3(; name, k1=1, k2=1, k3=1)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k1::Real = k1), [description = "Gain of input signal 1"])
  append!(__params, @parameters (k2::Real = k2), [description = "Gain of input signal 2"])
  append!(__params, @parameters (k3::Real = k3), [description = "Gain of input signal 3"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (u1(t)::Real), [input = true])
  append!(__vars, @variables (u2(t)::Real), [input = true])
  append!(__vars, @variables (u3(t)::Real), [input = true])
  append!(__vars, @variables (y(t)::Real), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ k1 * u1 + k2 * u2 + k3 * u3)

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export Add3

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Add3)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
