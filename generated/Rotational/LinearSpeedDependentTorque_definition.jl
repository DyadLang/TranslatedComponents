### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   LinearSpeedDependentTorque(; name, useSupport, TorqueDirection, tau_nominal, w_nominal)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `useSupport`         | = true, if support flange enabled, otherwise implicitly grounded                         | --  |   false |
| `TorqueDirection`         | Same direction of torque in both directions of rotation                         | --  |   true |
| `tau_nominal`         | Nominal torque (if negative, torque is acting as load in positive direction of rotation)                         | N.m  |    |
| `w_nominal`         | Nominal speed                         | rad/s  |    |

## Connectors

 * `flange` - This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively. ([`Spline`](@ref))
 * `support` - This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively. ([`Spline`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `phi_support`         | Absolute angle of support flange                         | rad  | 
| `phi`         | Angle of flange with respect to support (= flange.phi - support.phi)                         | rad  | 
| `w`         | Angular velocity of flange with respect to support (= der(phi))                         | rad/s  | 
| `tau`         | Accelerating torque acting at flange (= -flange.tau)                         | N.m  | 
"""
@component function LinearSpeedDependentTorque(; name, useSupport=false, TorqueDirection=true, tau_nominal=nothing, w_nominal=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (tau_nominal::Real = tau_nominal), [description = "Nominal torque (if negative, torque is acting as load in positive direction of rotation)"])
  append!(__params, @parameters (w_nominal::Real = w_nominal), [description = "Nominal speed"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (phi_support(t)::Real), [description = "Absolute angle of support flange"])
  append!(__vars, @variables (phi(t)::Real), [description = "Angle of flange with respect to support (= flange.phi - support.phi)"])
  append!(__vars, @variables (w(t)::Real), [description = "Angular velocity of flange with respect to support (= der(phi))"])
  append!(__vars, @variables (tau(t)::Real), [description = "Accelerating torque acting at flange (= -flange.tau)"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named flange = __Dyad__Spline())
  push!(__systems, @named support = __Dyad__Spline())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, phi ~ flange.phi - phi_support)
  push!(__eqs, w ~ D(phi))
  push!(__eqs, tau ~ -flange.tau)

  ### Control Structures
  if useSupport
      __defaults[support.phi] = (phi_support)
      push!(__initialization_eqs, support.tau ~ -flange.tau)
  else
      push!(__eqs, phi_support ~ 0)
  end
  if TorqueDirection
      push!(__eqs, tau ~ tau_nominal * abs(w / w_nominal))
  else
      push!(__eqs, tau ~ tau_nominal * (w / w_nominal))
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export LinearSpeedDependentTorque

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(LinearSpeedDependentTorque)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
