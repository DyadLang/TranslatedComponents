### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@kwdef mutable struct StateSelect__Never
end

function Base.setproperty!(value::StateSelect__Never, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::StateSelect__Never)
  println(io, "[StateSelect__Never] \n ")
end

Base.copy(x::StateSelect__Never) = StateSelect__Never()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::StateSelect__Never) = [
]

export StateSelect__Never

@kwdef mutable struct StateSelect__Avoid
end

function Base.setproperty!(value::StateSelect__Avoid, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::StateSelect__Avoid)
  println(io, "[StateSelect__Avoid] \n ")
end

Base.copy(x::StateSelect__Avoid) = StateSelect__Avoid()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::StateSelect__Avoid) = [
]

export StateSelect__Avoid

@kwdef mutable struct StateSelect__Default
end

function Base.setproperty!(value::StateSelect__Default, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::StateSelect__Default)
  println(io, "[StateSelect__Default] \n ")
end

Base.copy(x::StateSelect__Default) = StateSelect__Default()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::StateSelect__Default) = [
]

export StateSelect__Default

@kwdef mutable struct StateSelect__Prefer
end

function Base.setproperty!(value::StateSelect__Prefer, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::StateSelect__Prefer)
  println(io, "[StateSelect__Prefer] \n ")
end

Base.copy(x::StateSelect__Prefer) = StateSelect__Prefer()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::StateSelect__Prefer) = [
]

export StateSelect__Prefer

@kwdef mutable struct StateSelect__Always
end

function Base.setproperty!(value::StateSelect__Always, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::StateSelect__Always)
  println(io, "[StateSelect__Always] \n ")
end

Base.copy(x::StateSelect__Always) = StateSelect__Always()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::StateSelect__Always) = [
]

export StateSelect__Always

