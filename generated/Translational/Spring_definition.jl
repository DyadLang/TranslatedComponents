### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Spring(; name, c, s_rel0)

Linear 1D Translational spring
This component is translated by DyadAI

## Parameters:

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `c`         | Spring constant                         | N/m  |   1 |
| `s_rel0`         | Unstretched spring length                         | m  |   0 |

## Connectors

 * `flange_a` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([`Flange`](@ref))
 * `flange_b` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([`Flange`](@ref))

## Variables

| Name         | Description                         | Units  |
| ------------ | ----------------------------------- | ------ |
| `s_rel`         | Relative distance (= flange_b.s - flange_a.s)                         | m  |
| `f`         | Force between flanges (positive in direction of flange axis R)                         | N  |
"""
@component function Spring(; name, c=1, s_rel0=0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (c::Float64 = c), [description = "Spring constant"])
  append!(__params, @parameters (s_rel0::Float64 = s_rel0), [description = "Unstretched spring length"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (s_rel(t)), [description = "Relative distance (= flange_b.s - flange_a.s)"])
  append!(__vars, @variables (f(t)), [description = "Force between flanges (positive in direction of flange axis R)"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange_a = __Dyad__Flange())
  push!(__systems, @named flange_b = __Dyad__Flange())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, s_rel ~ flange_b.s - flange_a.s)
  push!(__eqs, flange_b.f ~ f)
  push!(__eqs, flange_a.f ~ -f)
  push!(__eqs, f ~ c * (s_rel - s_rel0))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Spring

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Spring)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>

      </svg></div></div>""")
