### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   VariableCapacitor(; name, UIC, Cmin, IC)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `UIC`         | Decision if initial value IC shall be used                         | --  |   false |
| `Cmin`         | Lower bound for variable capacitance                         | F  |   Modelica.Constants.eps |
| `IC`         | Initial Value                         | V  |   0 |

## Connectors

 * `p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `C` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         | Voltage drop of the two pins (= p.v - n.v)                         | V  | 
| `i`         | Current flowing from pin p to pin n                         | A  | 
| `Q`         |                          | C  | 
"""
@component function VariableCapacitor(; name, UIC=false, Cmin=Modelica.Constants.eps, IC=0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Cmin::Real = Cmin), [description = "Lower bound for variable capacitance"])
  append!(__params, @parameters (IC::Real = IC), [description = "Initial Value"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (C(t)::Real), [input = true])
  append!(__vars, @variables (v(t)::Real), [description = "Voltage drop of the two pins (= p.v - n.v)"])
  append!(__vars, @variables (i(t)::Real), [description = "Current flowing from pin p to pin n"])
  append!(__vars, @variables (Q(t)::Real))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, 0 ~ p.i + n.i)
  push!(__eqs, i ~ p.i)
  push!(__eqs, Q ~ identity(max(C, Cmin)) * v)
  push!(__eqs, i ~ D(Q))

  ### Control Structures
  if UIC
      __defaults[v] = (IC)
  else
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export VariableCapacitor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VariableCapacitor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
