### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Potentiometer(; name, useHeatPort, T, R, T_ref, alpha, useRinput, rConstant)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `useHeatPort`         | = true, if heatPort is enabled                         | --  |   false |
| `T`         | Fixed device temperature if useHeatPort = false                         | K  |   T_ref |
| `R`         | Resistance at temperature T_ref                         | Ω  |   1 |
| `T_ref`         | Reference temperature                         | K  |   293.15 |
| `alpha`         | Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))                         | 1/K  |   0 |
| `useRinput`         | Use input for 0<r<1 (else constant)                         | --  |   false |
| `rConstant`         | Contact between n (r=0) and p (r=1)                         | --  |   0.5 |

## Connectors

 * `heatPort` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))
 * `pin_p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `contact` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `pin_n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `r` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))
 * `rInt` - This connector represents a real signal as an input to a component ([`RealInput`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `LossPower`         | Loss power leaving component via heatPort                         | W  | 
| `T_heatPort`         | Temperature of heatPort                         | K  | 
| `Rp`         | Actual resistance between pin_p and contact                         | Ω  | 
| `Rn`         | Actual resistance between contact and pin_n                         | Ω  | 
"""
@component function Potentiometer(; name, useHeatPort=false, T=T_ref, R=1, T_ref=293.15, alpha=0, useRinput=false, rConstant=0.5)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T::Real = T), [description = "Fixed device temperature if useHeatPort = false"])
  append!(__params, @parameters (R::Real = R), [description = "Resistance at temperature T_ref"])
  append!(__params, @parameters (T_ref::Real = T_ref), [description = "Reference temperature"])
  append!(__params, @parameters (alpha::Real = alpha), [description = "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))"])
  append!(__params, @parameters (useRinput::Bool = useRinput), [description = "Use input for 0<r<1 (else constant)"])
  append!(__params, @parameters (rConstant::Real = rConstant), [description = "Contact between n (r=0) and p (r=1)"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (r(t)::Real), [input = true])
  append!(__vars, @variables (rInt(t)::Real), [input = true])
  append!(__vars, @variables (LossPower(t)::Real), [description = "Loss power leaving component via heatPort"])
  append!(__vars, @variables (T_heatPort(t)::Real), [description = "Temperature of heatPort"])
  append!(__vars, @variables (Rp(t)::Real), [description = "Actual resistance between pin_p and contact"])
  append!(__vars, @variables (Rn(t)::Real), [description = "Actual resistance between contact and pin_n"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named heatPort = TranslatedComponents.Analog.HeatPort())
  push!(__systems, @named pin_p = __Dyad__Pin())
  push!(__systems, @named contact = __Dyad__Pin())
  push!(__systems, @named pin_n = __Dyad__Pin())
  push!(__systems, @named rConst = BlockComponents.Constant(k=rConstant))

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, pin_p.i + pin_n.i + contact.i ~ 0)
  push!(__eqs, Rp ~ R * (1 + alpha * (T_heatPort - T_ref)) * (1 - min(1, max(0, rInt))))
  push!(__eqs, Rn ~ R * (1 + alpha * (T_heatPort - T_ref)) * min(1, max(0, rInt)))
  push!(__eqs, pin_p.v - contact.v ~ Rp * pin_p.i)
  push!(__eqs, pin_n.v - contact.v ~ Rn * pin_n.i)
  push!(__eqs, LossPower ~ (pin_p.v - contact.v) * pin_p.i + (pin_n.v - contact.v) * pin_n.i)
  push!(__eqs, connect(rInt, r))
  push!(__eqs, connect(rConst.y, rInt))

  ### Control Structures
  if !(useHeatPort)
      push!(__eqs, T_heatPort ~ T)
  else
      __defaults[heatPort.T] = (T_heatPort)
      push!(__initialization_eqs, heatPort.Q_flow ~ -LossPower)
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export Potentiometer

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Potentiometer)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
