### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Diode2(; name, useHeatPort, T, Vf, Ids, Rs, Vt, N, Bv, Gp)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `useHeatPort`         | = true, if heatPort is enabled                         | --  |   false |
| `T`         | Fixed device temperature if useHeatPort = false                         | K  |   293.15 |
| `Vf`         | Forward voltage                         | V  |   0.7 |
| `Ids`         | Reverse saturation current                         | A  |   1e-13 |
| `Rs`         | Ohmic resistance                         | Î©  |   16 |
| `Vt`         | Thermal voltage (kT/q), 0.026 at normal conditions (around 20 degC)                         | V  |   Modelica.Constants.R * T / Modelica.Constants.F |
| `N`         | Emission coefficient                         | --  |   1 |
| `Bv`         | Reverse breakdown voltage                         | V  |   100 |
| `Gp`         | Parallel conductance for numerical stability                         | S  |   0.000001 |

## Connectors

 * `p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `heatPort` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         | Voltage drop of the two pins (= p.v - n.v)                         | V  | 
| `i`         | Current flowing from pin p to pin n                         | A  | 
| `LossPower`         | Loss power leaving component via heatPort                         | W  | 
| `T_heatPort`         | Temperature of heatPort                         | K  | 
| `vd`         | Voltage across pure diode part                         | V  | 
| `id`         | Diode current                         | A  | 
| `VdMax`         | Linear continuation threshold                         | V  | 
| `iVdMax`         | Current at threshold                         | A  | 
| `diVdMax`         | Conductance at threshold                         | S  | 
| `Vt_applied`         |                          | V  | 
"""
@component function Diode2(; name, useHeatPort=false, T=293.15, Vf=0.7, Ids=1e-13, Rs=16, Vt=Modelica.Constants.R * T / Modelica.Constants.F, N=1, Bv=100, Gp=0.000001)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T::Real = T), [description = "Fixed device temperature if useHeatPort = false"])
  append!(__params, @parameters (Vf::Real = Vf), [description = "Forward voltage"])
  append!(__params, @parameters (Ids::Real = Ids), [description = "Reverse saturation current"])
  append!(__params, @parameters (Rs::Real = Rs), [description = "Ohmic resistance"])
  append!(__params, @parameters (Vt::Real = Vt), [description = "Thermal voltage (kT/q), 0.026 at normal conditions (around 20 degC)"])
  append!(__params, @parameters (N::Real = N), [description = "Emission coefficient"])
  append!(__params, @parameters (Bv::Real = Bv), [description = "Reverse breakdown voltage"])
  append!(__params, @parameters (Gp::Real = Gp), [description = "Parallel conductance for numerical stability"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)::Real), [description = "Voltage drop of the two pins (= p.v - n.v)"])
  append!(__vars, @variables (i(t)::Real), [description = "Current flowing from pin p to pin n"])
  append!(__vars, @variables (LossPower(t)::Real), [description = "Loss power leaving component via heatPort"])
  append!(__vars, @variables (T_heatPort(t)::Real), [description = "Temperature of heatPort"])
  append!(__vars, @variables (vd(t)::Real), [description = "Voltage across pure diode part"])
  append!(__vars, @variables (id(t)::Real), [description = "Diode current"])
  append!(__vars, @variables (VdMax(t)::Real), [description = "Linear continuation threshold"])
  append!(__vars, @variables (iVdMax(t)::Real), [description = "Current at threshold"])
  append!(__vars, @variables (diVdMax(t)::Real), [description = "Conductance at threshold"])
  append!(__vars, @variables (Vt_applied(t)::Real))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())
  push!(__systems, @named heatPort = TranslatedComponents.Analog.HeatPort())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, 0 ~ p.i + n.i)
  push!(__eqs, i ~ p.i)
  push!(__eqs, Vt_applied ~ ifelse(useHeatPort, 8.31446261815324 * T_heatPort / 96485.33212331001, Vt))
  push!(__eqs, v ~ vd + id * Rs)
  push!(__eqs, i ~ id + v * Gp)
  push!(__eqs, LossPower ~ i * v)
  push!(__eqs, VdMax ~ Vf + (N * Vt_applied))
  push!(__eqs, iVdMax ~ Ids * (exp(VdMax / (N * Vt_applied)) - 1))
  push!(__eqs, diVdMax ~ Ids * exp(VdMax / (N * Vt_applied)) / (N * Vt_applied))

  ### Control Structures
  if !(useHeatPort)
      push!(__eqs, T_heatPort ~ T)
  else
      __defaults[heatPort.T] = (T_heatPort)
      push!(__initialization_eqs, heatPort.Q_flow ~ -LossPower)
  end
  if vd < -Bv / 2
      push!(__eqs, id ~ -Ids * (exp(-(vd + Bv) / (N * Vt_applied)) + 1 - 2 * exp(-Bv / (2 * N * Vt_applied))))
  elseif vd < VdMax
      push!(__eqs, id ~ Ids * (exp(vd / (N * Vt_applied)) - 1))
  else
      push!(__eqs, id ~ iVdMax + (vd - VdMax) * diVdMax)
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export Diode2

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Diode2)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
