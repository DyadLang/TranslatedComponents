### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Thyristor(; name, useHeatPort, T, VDRM, VRRM, IDRM, VTM, IH, ITM, VGT, IGT, TON, TOFF, Vt, Nbv, vRef, Von, Voff, Ron, Roff)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `useHeatPort`         | = true, if heatPort is enabled                         | --  |   false |
| `T`         | Fixed device temperature if useHeatPort = false                         | K  |   293.15 |
| `VDRM`         | Forward breakthrough voltage                         | V  |   100 |
| `VRRM`         | Reverse breakthrough voltage                         | V  |   100 |
| `IDRM`         | Saturation current                         | A  |   0.1 |
| `VTM`         | Conducting voltage                         | V  |   1.7 |
| `IH`         | Holding current                         | A  |   0.006 |
| `ITM`         | Conducting current                         | A  |   25 |
| `VGT`         | Gate trigger voltage                         | V  |   0.7 |
| `IGT`         | Gate trigger current                         | A  |   0.005 |
| `TON`         | Switch on time                         | s  |   0.000001 |
| `TOFF`         | Switch off time                         | s  |   0.000015 |
| `Vt`         | Voltage equivalent of temperature (kT/qn)                         | V  |   0.04 |
| `Nbv`         | Reverse Breakthrough emission coefficient                         | --  |   0.74 |
| `vRef`         |                          | V  |   0.65 |
| `Von`         |                          | V  |   5 |
| `Voff`         |                          | V  |   1.5 |
| `Ron`         | Forward conducting mode resistance                         | Ω  |   (VTM - 0.7) / ITM |
| `Roff`         | Blocking mode resistance                         | Ω  |   (VDRM ^ 2) / VTM / IH |

## Connectors

 * `heatPort` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))
 * `Anode` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `Cathode` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `Gate` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `LossPower`         | Loss power leaving component via heatPort                         | W  | 
| `T_heatPort`         | Temperature of heatPort                         | K  | 
| `iGK`         | Gate current                         | A  | 
| `vGK`         | Voltage between gate and cathode                         | V  | 
| `vAK`         | Voltage between anode and cathode                         | V  | 
| `vControl`         |                          | V  | 
| `vContot`         |                          | V  | 
| `vConmain`         |                          | V  | 
"""
@component function Thyristor(; name, useHeatPort=false, T=293.15, VDRM=100, VRRM=100, IDRM=0.1, VTM=1.7, IH=0.006, ITM=25, VGT=0.7, IGT=0.005, TON=0.000001, TOFF=0.000015, Vt=0.04, Nbv=0.74, vRef=0.65, Von=5, Voff=1.5, Ron=(VTM - 0.7) / ITM, Roff=(VDRM ^ 2) / VTM / IH)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T::Real = T), [description = "Fixed device temperature if useHeatPort = false"])
  append!(__params, @parameters (VDRM::Real = VDRM), [description = "Forward breakthrough voltage"])
  append!(__params, @parameters (VRRM::Real = VRRM), [description = "Reverse breakthrough voltage"])
  append!(__params, @parameters (IDRM::Real = IDRM), [description = "Saturation current"])
  append!(__params, @parameters (VTM::Real = VTM), [description = "Conducting voltage"])
  append!(__params, @parameters (IH::Real = IH), [description = "Holding current"])
  append!(__params, @parameters (ITM::Real = ITM), [description = "Conducting current"])
  append!(__params, @parameters (VGT::Real = VGT), [description = "Gate trigger voltage"])
  append!(__params, @parameters (IGT::Real = IGT), [description = "Gate trigger current"])
  append!(__params, @parameters (TON::Real = TON), [description = "Switch on time"])
  append!(__params, @parameters (TOFF::Real = TOFF), [description = "Switch off time"])
  append!(__params, @parameters (Vt::Real = Vt), [description = "Voltage equivalent of temperature (kT/qn)"])
  append!(__params, @parameters (Nbv::Real = Nbv), [description = "Reverse Breakthrough emission coefficient"])
  append!(__params, @parameters (vRef::Real = vRef))
  append!(__params, @parameters (Von::Real = Von))
  append!(__params, @parameters (Voff::Real = Voff))
  append!(__params, @parameters (Ron::Real = Ron), [description = "Forward conducting mode resistance"])
  append!(__params, @parameters (Roff::Real = Roff), [description = "Blocking mode resistance"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (LossPower(t)::Real), [description = "Loss power leaving component via heatPort"])
  append!(__vars, @variables (T_heatPort(t)::Real), [description = "Temperature of heatPort"])
  append!(__vars, @variables (iGK(t)::Real), [description = "Gate current"])
  append!(__vars, @variables (vGK(t)::Real), [description = "Voltage between gate and cathode"])
  append!(__vars, @variables (vAK(t)::Real), [description = "Voltage between anode and cathode"])
  append!(__vars, @variables (vControl(t)::Real))
  append!(__vars, @variables (vContot(t)::Real))
  append!(__vars, @variables (vConmain(t)::Real))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named heatPort = TranslatedComponents.HeatTransfer.HeatPort())
  push!(__systems, @named Anode = __Dyad__Pin())
  push!(__systems, @named Cathode = __Dyad__Pin())
  push!(__systems, @named Gate = __Dyad__Pin())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, Anode.i + Gate.i + Cathode.i ~ 0)
  push!(__eqs, vGK ~ Gate.v - Cathode.v)
  push!(__eqs, vAK ~ Anode.v - Cathode.v)
  push!(__eqs, iGK ~ Gate.i)
  push!(__eqs, vGK ~ ifelse(vGK < vRef, VGT / IGT * iGK, vRef ^ 2 / VGT + iGK * (VGT - vRef) / IGT))
  push!(__eqs, vContot ~ vConmain + (ifelse(iGK < 0.95 * IGT, 0, (ifelse(iGK < 0.95 * IGT + 0.001, 10000 * (iGK - 0.95 * IGT) * vAK, 10 * vAK)))))
  push!(__eqs, D(vControl) ~ (vContot - vControl) / (ifelse((vContot - vControl) > 0, 1.87 * TON, 0.638 * TOFF)))
  push!(__eqs, Anode.i ~ ifelse(vAK < -VRRM, -VRRM / Roff * exp(-(vAK + VRRM) / (Nbv * Vt)), (ifelse(vControl < Voff, vAK / Roff, (ifelse(vControl < Von, vAK / (sqrt(Ron * Roff) * (Ron / Roff) ^ ((3 * ((2 * vControl - Von - Voff) / (2 * (Von - Voff))) - 4 * ((2 * vControl - Von - Voff) / (2 * (Von - Voff))) ^ 3) / 2)), vAK / Ron))))))
  push!(__eqs, vConmain ~ (ifelse((Anode.i > IH) | (vAK > VDRM), Von, 0)))
  push!(__eqs, LossPower ~ Anode.i * Anode.v + Cathode.i * Cathode.v + Gate.i * Gate.v)

  ### Control Structures
  if !(useHeatPort)
      push!(__eqs, T_heatPort ~ T)
  else
      __defaults[heatPort.T] = (T_heatPort)
      push!(__initialization_eqs, heatPort.Q_flow ~ -LossPower)
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export Thyristor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Thyristor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
