### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   IdealOpAmpLimited(; name, unitVoltage)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `unitVoltage`         |                          | V  |   1 |

## Connectors

 * `in_p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `in_n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `out` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `VMax` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `VMin` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `vin`         | Input voltage                         | V  | 
| `s`         | Auxiliary variable                         | --  | 
"""
@component function IdealOpAmpLimited(; name, unitVoltage=1)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (unitVoltage::Real = unitVoltage))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (vin(t)::Real), [description = "Input voltage"])
  append!(__vars, @variables (s(t)::Real), [description = "Auxiliary variable"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named in_p = __Dyad__Pin())
  push!(__systems, @named in_n = __Dyad__Pin())
  push!(__systems, @named out = __Dyad__Pin())
  push!(__systems, @named VMax = __Dyad__Pin())
  push!(__systems, @named VMin = __Dyad__Pin())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, in_p.i ~ 0)
  push!(__eqs, in_n.i ~ 0)
  push!(__eqs, VMax.i ~ 0)
  push!(__eqs, VMin.i ~ 0)
  push!(__eqs, vin ~ in_p.v - in_n.v)
  push!(__eqs, in_p.v - in_n.v ~ unitVoltage * identity(ifelse(s < -1, s + 1, (ifelse(s > 1, s - 1, 0)))))
  push!(__eqs, out.v ~ identity(ifelse(s < -1, VMin.v, (ifelse(s > 1, VMax.v, (VMax.v - VMin.v) * s / 2 + (VMax.v + VMin.v) / 2)))))

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export IdealOpAmpLimited

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(IdealOpAmpLimited)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
