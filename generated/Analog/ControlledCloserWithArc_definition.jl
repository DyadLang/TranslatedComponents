### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   ControlledCloserWithArc(; name, useHeatPort, T, Ron, Goff, V0, dVdt, Vmax, level)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `useHeatPort`         | = true, if heatPort is enabled                         | --  |   false |
| `T`         | Fixed device temperature if useHeatPort = false                         | K  |   293.15 |
| `Ron`         | Closed switch resistance                         | Î©  |   0.00001 |
| `Goff`         | Opened switch conductance                         | S  |   0.00001 |
| `V0`         | Initial arc voltage                         | V  |   30 |
| `dVdt`         | Arc voltage slope                         | V/s  |   10000 |
| `Vmax`         | Max. arc voltage                         | V  |   60 |
| `level`         | Switch level                         | V  |   0.5 |

## Connectors

 * `p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `heatPort` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))
 * `control` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         | Voltage drop of the two pins (= p.v - n.v)                         | V  | 
| `i`         | Current flowing from pin p to pin n                         | A  | 
| `LossPower`         | Loss power leaving component via heatPort                         | W  | 
| `T_heatPort`         | Temperature of heatPort                         | K  | 
| `off`         | Indicates off-state (but maybe not quenched)                         | --  | 
| `quenched`         | Indicating quenched arc (if switch is off)                         | --  | 
| `tSwitch`         | Last switch off time instant                         | s  | 
"""
@component function ControlledCloserWithArc(; name, useHeatPort=false, T=293.15, Ron=0.00001, Goff=0.00001, V0=30, dVdt=10000, Vmax=60, level=0.5)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T::Real = T), [description = "Fixed device temperature if useHeatPort = false"])
  append!(__params, @parameters (Ron::Real = Ron), [description = "Closed switch resistance"])
  append!(__params, @parameters (Goff::Real = Goff), [description = "Opened switch conductance"])
  append!(__params, @parameters (V0::Real = V0), [description = "Initial arc voltage"])
  append!(__params, @parameters (dVdt::Real = dVdt), [description = "Arc voltage slope"])
  append!(__params, @parameters (Vmax::Real = Vmax), [description = "Max. arc voltage"])
  append!(__params, @parameters (level::Real = level), [description = "Switch level"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)::Real), [description = "Voltage drop of the two pins (= p.v - n.v)"])
  append!(__vars, @variables (i(t)::Real), [description = "Current flowing from pin p to pin n"])
  append!(__vars, @variables (LossPower(t)::Real), [description = "Loss power leaving component via heatPort"])
  append!(__vars, @variables (T_heatPort(t)::Real), [description = "Temperature of heatPort"])
  append!(__vars, @variables (off(t)::Bool), [description = "Indicates off-state (but maybe not quenched)"])
  append!(__vars, @variables (quenched(t)::Bool), [description = "Indicating quenched arc (if switch is off)"])
  append!(__vars, @variables (tSwitch(t)::Real), [description = "Last switch off time instant"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())
  push!(__systems, @named heatPort = TranslatedComponents.Analog.HeatPort())
  push!(__systems, @named control = __Dyad__Pin())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, 0 ~ p.i + n.i)
  push!(__eqs, i ~ p.i)
  push!(__eqs, quenched ~ (off) & (((abs(i) <= abs(v) * Goff) | (pre(quenched)))))
  push!(__eqs, LossPower ~ v * i)
  push!(__eqs, off ~ control.v < level)
  push!(__eqs, control.i ~ 0)

  ### Control Structures
  if !(useHeatPort)
      push!(__eqs, T_heatPort ~ T)
  else
      __defaults[heatPort.T] = (T_heatPort)
      push!(__initialization_eqs, heatPort.Q_flow ~ -LossPower)
  end
  if edge(off)
      push!(__eqs, tSwitch ~ t)
  else
  end
  if off
      if quenched
            push!(__eqs, i ~ Goff * v)
      else
            push!(__eqs, v ~ min(Vmax, V0 + dVdt * (t - tSwitch)) * sign(i))
      end
  else
      push!(__eqs, v ~ Ron * i)
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export ControlledCloserWithArc

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(ControlledCloserWithArc)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
