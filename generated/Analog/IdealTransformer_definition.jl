### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   IdealTransformer(; name, considerMagnetization, n, Lm1)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `considerMagnetization`         | Choice of considering magnetization                         | --  |   false |
| `n`         | Turns ratio primary:secondary voltage                         | --  |   1 |
| `Lm1`         | Magnetization inductance w.r.t. primary side                         | H  |   1 |

## Connectors

 * `p1` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n1` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `p2` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n2` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v1`         | Voltage drop of port 1 (= p1.v - n1.v)                         | V  | 
| `v2`         | Voltage drop of port 2 (= p2.v - n2.v)                         | V  | 
| `i1`         | Current flowing from pos. to neg. pin of port 1                         | A  | 
| `i2`         | Current flowing from pos. to neg. pin of port 2                         | A  | 
| `im1`         | Magnetization current w.r.t. primary side                         | A  | 
| `psim1`         | Magnetic flux w.r.t. primary side                         | Wb  | 
"""
@component function IdealTransformer(; name, considerMagnetization=false, n=1, Lm1=1)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (n::Real = n), [description = "Turns ratio primary:secondary voltage"])
  append!(__params, @parameters (Lm1::Real = Lm1), [description = "Magnetization inductance w.r.t. primary side"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v1(t)::Real), [description = "Voltage drop of port 1 (= p1.v - n1.v)"])
  append!(__vars, @variables (v2(t)::Real), [description = "Voltage drop of port 2 (= p2.v - n2.v)"])
  append!(__vars, @variables (i1(t)::Real), [description = "Current flowing from pos. to neg. pin of port 1"])
  append!(__vars, @variables (i2(t)::Real), [description = "Current flowing from pos. to neg. pin of port 2"])
  append!(__vars, @variables (im1(t)::Real), [description = "Magnetization current w.r.t. primary side"])
  append!(__vars, @variables (psim1(t)::Real), [description = "Magnetic flux w.r.t. primary side"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named p1 = __Dyad__Pin())
  push!(__systems, @named n1 = __Dyad__Pin())
  push!(__systems, @named p2 = __Dyad__Pin())
  push!(__systems, @named n2 = __Dyad__Pin())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v1 ~ p1.v - n1.v)
  push!(__eqs, v2 ~ p2.v - n2.v)
  push!(__eqs, i1 ~ p1.i)
  push!(__eqs, i2 ~ p2.i)
  push!(__eqs, 0 ~ p1.i + n1.i)
  push!(__eqs, 0 ~ p2.i + n2.i)
  push!(__eqs, im1 ~ i1 + i2 / n)
  push!(__eqs, v1 ~ n * v2)

  ### Control Structures
  if considerMagnetization
      push!(__eqs, psim1 ~ Lm1 * im1)
      push!(__eqs, v1 ~ D(psim1))
  else
      push!(__eqs, psim1 ~ 0)
      push!(__eqs, im1 ~ 0)
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export IdealTransformer

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(IdealTransformer)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
