### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   ZDiode(; name, useHeatPort, T, Ids, Vt, Maxexp, R, Bv, Ibv, Nbv)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `useHeatPort`         | = true, if heatPort is enabled                         | --  |   false |
| `T`         | Fixed device temperature if useHeatPort = false                         | K  |   293.15 |
| `Ids`         | Saturation current                         | A  |   0.000001 |
| `Vt`         | Voltage equivalent of temperature (kT/qn)                         | V  |   0.04 |
| `Maxexp`         | Max. exponent for linear continuation                         | --  |   30 |
| `R`         | Parallel ohmic resistance                         | Î©  |   100000000 |
| `Bv`         | Breakthrough voltage = Zener- or Z-voltage                         | V  |   5.1 |
| `Ibv`         | Breakthrough knee current                         | A  |   0.7 |
| `Nbv`         | Breakthrough emission coefficient                         | --  |   0.74 |

## Connectors

 * `p` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `n` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `heatPort` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         | Voltage drop of the two pins (= p.v - n.v)                         | V  | 
| `i`         | Current flowing from pin p to pin n                         | A  | 
| `LossPower`         | Loss power leaving component via heatPort                         | W  | 
| `T_heatPort`         | Temperature of heatPort                         | K  | 
"""
@component function ZDiode(; name, useHeatPort=false, T=293.15, Ids=0.000001, Vt=0.04, Maxexp=30, R=100000000, Bv=5.1, Ibv=0.7, Nbv=0.74)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T::Real = T), [description = "Fixed device temperature if useHeatPort = false"])
  append!(__params, @parameters (Ids::Real = Ids), [description = "Saturation current"])
  append!(__params, @parameters (Vt::Real = Vt), [description = "Voltage equivalent of temperature (kT/qn)"])
  append!(__params, @parameters (Maxexp::Real = Maxexp), [description = "Max. exponent for linear continuation"])
  append!(__params, @parameters (R::Real = R), [description = "Parallel ohmic resistance"])
  append!(__params, @parameters (Bv::Real = Bv), [description = "Breakthrough voltage = Zener- or Z-voltage"])
  append!(__params, @parameters (Ibv::Real = Ibv), [description = "Breakthrough knee current"])
  append!(__params, @parameters (Nbv::Real = Nbv), [description = "Breakthrough emission coefficient"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)::Real), [description = "Voltage drop of the two pins (= p.v - n.v)"])
  append!(__vars, @variables (i(t)::Real), [description = "Current flowing from pin p to pin n"])
  append!(__vars, @variables (LossPower(t)::Real), [description = "Loss power leaving component via heatPort"])
  append!(__vars, @variables (T_heatPort(t)::Real), [description = "Temperature of heatPort"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())
  push!(__systems, @named heatPort = TranslatedComponents.Analog.HeatPort())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, 0 ~ p.i + n.i)
  push!(__eqs, i ~ p.i)
  push!(__eqs, i ~ ifelse((v > Maxexp * Vt), (Ids * (exp(Maxexp) * (1 + v / Vt - Maxexp) - 1) + v / R), (ifelse((v + Bv) < -Maxexp * (Nbv * Vt), (-Ids - Ibv * exp(Maxexp) * (1 - (v + Bv) / (Nbv * Vt) - Maxexp) + v / R), (Ids * (exp(v / Vt) - 1) - Ibv * exp(-(v + Bv) / (Nbv * Vt)) + v / R)))))
  push!(__eqs, LossPower ~ v * i)

  ### Control Structures
  if !(useHeatPort)
      push!(__eqs, T_heatPort ~ T)
  else
      __defaults[heatPort.T] = (T_heatPort)
      push!(__initialization_eqs, heatPort.Q_flow ~ -LossPower)
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export ZDiode

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(ZDiode)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
