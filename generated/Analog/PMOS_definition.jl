### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   PMOS(; name, useHeatPort, T, W, L, Beta, Vt, K2, K5, dW, dL, RDS, useTemperatureDependency, Tnom, kvt, kk2)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `useHeatPort`         | = true, if heatPort is enabled                         | --  |   false |
| `T`         | Fixed device temperature if useHeatPort = false                         | K  |   293.15 |
| `W`         | Width                         | m  |   0.00002 |
| `L`         | Length                         | m  |   0.000006 |
| `Beta`         | Transconductance parameter                         | A/V2  |   0.0000105 |
| `Vt`         | Zero bias threshold voltage                         | V  |   -1 |
| `K2`         | Bulk threshold parameter                         | --  |   0.41 |
| `K5`         | Reduction of pinch-off region                         | --  |   0.839 |
| `dW`         | Narrowing of channel                         | m  |   -0.0000025 |
| `dL`         | Shortening of channel                         | m  |   -0.0000021 |
| `RDS`         | Drain-Source-Resistance                         | Î©  |   10000000 |
| `useTemperatureDependency`         | = true, if parameters Beta, K2 and Vt depend on temperature                         | --  |   false |
| `Tnom`         | Parameter measurement temperature                         | K  |   300.15 |
| `kvt`         | Fitting parameter for Vt                         | --  |   -0.0029 |
| `kk2`         | Fitting parameter for K2                         | --  |   0.00062 |

## Connectors

 * `heatPort` - Thermal port for 1-dim. heat transfer
This component is translated by DyadAI ([`HeatPort`](@ref))
 * `D` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `G` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `S` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))
 * `B` - This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively. ([`Pin`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `LossPower`         | Loss power leaving component via heatPort                         | W  | 
| `T_heatPort`         | Temperature of heatPort                         | K  | 
| `v`         |                          | --  | 
| `uds`         |                          | --  | 
| `ubs`         |                          | --  | 
| `ugst`         |                          | --  | 
| `ud`         |                          | --  | 
| `us`         |                          | --  | 
| `id`         |                          | --  | 
| `gds`         |                          | --  | 
| `beta_t`         |                          | --  | 
| `vt_t`         |                          | --  | 
| `k2_t`         |                          | --  | 
"""
@component function PMOS(; name, useHeatPort=false, T=293.15, W=0.00002, L=0.000006, Beta=0.0000105, Vt=-1, K2=0.41, K5=0.839, dW=-0.0000025, dL=-0.0000021, RDS=10000000, useTemperatureDependency=false, Tnom=300.15, kvt=-0.0029, kk2=0.00062)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (T::Real = T), [description = "Fixed device temperature if useHeatPort = false"])
  append!(__params, @parameters (W::Real = W), [description = "Width"])
  append!(__params, @parameters (L::Real = L), [description = "Length"])
  append!(__params, @parameters (Beta::Real = Beta), [description = "Transconductance parameter"])
  append!(__params, @parameters (Vt::Real = Vt), [description = "Zero bias threshold voltage"])
  append!(__params, @parameters (K2::Real = K2), [description = "Bulk threshold parameter"])
  append!(__params, @parameters (K5::Real = K5), [description = "Reduction of pinch-off region"])
  append!(__params, @parameters (dW::Real = dW), [description = "Narrowing of channel"])
  append!(__params, @parameters (dL::Real = dL), [description = "Shortening of channel"])
  append!(__params, @parameters (RDS::Real = RDS), [description = "Drain-Source-Resistance"])
  append!(__params, @parameters (useTemperatureDependency::Bool = useTemperatureDependency), [description = "= true, if parameters Beta, K2 and Vt depend on temperature"])
  append!(__params, @parameters (Tnom::Real = Tnom), [description = "Parameter measurement temperature"])
  append!(__params, @parameters (kvt::Real = kvt), [description = "Fitting parameter for Vt"])
  append!(__params, @parameters (kk2::Real = kk2), [description = "Fitting parameter for K2"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (LossPower(t)::Real), [description = "Loss power leaving component via heatPort"])
  append!(__vars, @variables (T_heatPort(t)::Real), [description = "Temperature of heatPort"])
  append!(__vars, @variables (v(t)::Real))
  append!(__vars, @variables (uds(t)::Real))
  append!(__vars, @variables (ubs(t)::Real))
  append!(__vars, @variables (ugst(t)::Real))
  append!(__vars, @variables (ud(t)::Real))
  append!(__vars, @variables (us(t)::Real))
  append!(__vars, @variables (id(t)::Real))
  append!(__vars, @variables (gds(t)::Real))
  append!(__vars, @variables (beta_t(t)::Real))
  append!(__vars, @variables (vt_t(t)::Real))
  append!(__vars, @variables (k2_t(t)::Real))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = System[]
  push!(__systems, @named heatPort = TranslatedComponents.Analog.HeatPort())
  push!(__systems, @named D = __Dyad__Pin())
  push!(__systems, @named G = __Dyad__Pin())
  push!(__systems, @named S = __Dyad__Pin())
  push!(__systems, @named B = __Dyad__Pin())

  ### Guesses
  __guesses = Dict()

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, gds ~ ifelse(((RDS < 1e-20) & (RDS > -1e-20)), 100000000000000000000, 1 / RDS))
  push!(__eqs, v ~ beta_t * (W + dW) / (L + dL))
  push!(__eqs, ud ~ identity(ifelse(D.v > S.v, S.v, D.v)))
  push!(__eqs, us ~ identity(ifelse(D.v > S.v, D.v, S.v)))
  push!(__eqs, uds ~ ud - us)
  push!(__eqs, ubs ~ identity(ifelse(B.v < us, 0, B.v - us)))
  push!(__eqs, ugst ~ (G.v - us - vt_t + k2_t * ubs) * K5)
  push!(__eqs, id ~ identity(ifelse(ugst >= 0, uds * gds, (ifelse(ugst < uds, -v * uds * (ugst - uds / 2) + uds * gds, -v * ugst * ugst / 2 + uds * gds)))))
  push!(__eqs, beta_t ~ ifelse(useTemperatureDependency, Beta * (T_heatPort / Tnom) ^ (-1.5), Beta))
  push!(__eqs, vt_t ~ ifelse(useTemperatureDependency, Vt * (1 + (T_heatPort - Tnom) * kvt), Vt))
  push!(__eqs, k2_t ~ ifelse(useTemperatureDependency, K2 * (1 + (T_heatPort - Tnom) * kk2), K2))
  push!(__eqs, G.i ~ 0)
  push!(__eqs, D.i ~ identity(ifelse(D.v > S.v, -id, id)))
  push!(__eqs, S.i ~ identity(ifelse(D.v > S.v, id, -id)))
  push!(__eqs, B.i ~ 0)
  push!(__eqs, LossPower ~ D.i * (D.v - S.v))

  ### Control Structures
  if !(useHeatPort)
      push!(__eqs, T_heatPort ~ T)
  else
      __defaults[heatPort.T] = (T_heatPort)
      push!(__initialization_eqs, heatPort.Q_flow ~ -LossPower)
  end

  # Return completely constructed System
  return System(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, guesses=__guesses, name, initialization_eqs=__initialization_eqs)
end
export PMOS

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PMOS)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
